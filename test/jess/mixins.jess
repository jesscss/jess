/**
 * TypeScript types are output based on assignment
 */
/** export let radius: Unit = Jess.unit('5px') */
@let radius: 5px;

/**
 * Mixins return objects
 * @output
 * export function something (radius: Unit = Jess.unit('5px')) {
 *   return {
 *     borderRadius: radius  -- (should get auto-converted to Jess.list([radius])
 *   }
 * }
 */
@mixin something (radius: 5px) {
  /** $radius. should auto-complete with unit methods */
  border-radius: $radius;
}

/**
 * @output
 * export function blah (radius: Unit = Jess.unit('5px') {
 *   return radius.multiply(2);
 * }  
 */
@function blah (radius: 5px) {
  @return $radius.multiply(2);
}

/**
 * @output
 * export function box2 (val: any) {
 * J.rule({
 *   sel: [J.sel('.box-2')],
 *   rules($) {
 *     $.add('value', [val])
 *   }
 * })
 * }  
 */
@rule box2 (val) {
  .box-2 {
    value: $val;
  }
}

/**
 * @output
 * type _ClassList = 'box'
 * export default J.root<_ClassList>(($) => {
 *   $.rule({
 *     sel: [J.sel('.box')],
 *     rules($) {
 *       $.include(something(Jess.unit('7px'))
 *       $.add('value', [Jess.func('blah', [Jess.unit('10px')])])
 *     }
 *   })
 *  $.include(box2())
 * }
 */
.box {
  /** @include $something() would be a JS context */
  @include something(7px);
  value: blah(10px);
}
@include box2();